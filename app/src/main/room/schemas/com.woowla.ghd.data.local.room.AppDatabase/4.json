{
  "formatVersion": 1,
  "database": {
    "version": 4,
    "identityHash": "8a429db38e7c1bbaa549bc5177a3df75",
    "entities": [
      {
        "tableName": "pull_request",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` TEXT NOT NULL, `repo_to_check_id` INTEGER NOT NULL, `number` INTEGER NOT NULL, `url` TEXT NOT NULL, `state` TEXT NOT NULL, `title` TEXT, `created_at` TEXT NOT NULL, `updated_at` TEXT NOT NULL, `merged_at` TEXT, `is_draft` INTEGER NOT NULL, `base_ref` TEXT, `head_ref` TEXT, `total_comments_count` INTEGER, `mergeable_state` TEXT NOT NULL DEFAULT '', `merge_state_status` TEXT NOT NULL DEFAULT '', `last_commit_check_rollup_status` TEXT NOT NULL, `last_commit_sha1` TEXT, `author_login` TEXT, `author_url` TEXT, `author_avatar_url` TEXT, PRIMARY KEY(`id`), FOREIGN KEY(`repo_to_check_id`) REFERENCES `repo_to_check`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "id",
            "columnName": "id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "repoToCheckId",
            "columnName": "repo_to_check_id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "number",
            "columnName": "number",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "url",
            "columnName": "url",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "state",
            "columnName": "state",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "title",
            "columnName": "title",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "createdAt",
            "columnName": "created_at",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "updatedAt",
            "columnName": "updated_at",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "mergedAt",
            "columnName": "merged_at",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "isDraft",
            "columnName": "is_draft",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "baseRef",
            "columnName": "base_ref",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "headRef",
            "columnName": "head_ref",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "totalCommentsCount",
            "columnName": "total_comments_count",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "mergeableState",
            "columnName": "mergeable_state",
            "affinity": "TEXT",
            "notNull": true,
            "defaultValue": "''"
          },
          {
            "fieldPath": "mergeStateStatus",
            "columnName": "merge_state_status",
            "affinity": "TEXT",
            "notNull": true,
            "defaultValue": "''"
          },
          {
            "fieldPath": "lastCommitCheckRollupStatus",
            "columnName": "last_commit_check_rollup_status",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "lastCommitSha1",
            "columnName": "last_commit_sha1",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "author.login",
            "columnName": "author_login",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "author.url",
            "columnName": "author_url",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "author.avatarUrl",
            "columnName": "author_avatar_url",
            "affinity": "TEXT"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "id"
          ]
        },
        "indices": [
          {
            "name": "index_pull_request_repo_to_check_id",
            "unique": false,
            "columnNames": [
              "repo_to_check_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_pull_request_repo_to_check_id` ON `${TABLE_NAME}` (`repo_to_check_id`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "repo_to_check",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "repo_to_check_id"
            ],
            "referencedColumns": [
              "id"
            ]
          }
        ]
      },
      {
        "tableName": "release",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` TEXT NOT NULL, `repo_to_check_id` INTEGER NOT NULL, `name` TEXT, `tag_name` TEXT NOT NULL, `url` TEXT NOT NULL, `published_at` TEXT, `author_login` TEXT, `author_url` TEXT, `author_avatar_url` TEXT, PRIMARY KEY(`id`), FOREIGN KEY(`repo_to_check_id`) REFERENCES `repo_to_check`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "id",
            "columnName": "id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "repoToCheckId",
            "columnName": "repo_to_check_id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "name",
            "columnName": "name",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "tagName",
            "columnName": "tag_name",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "url",
            "columnName": "url",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "publishedAt",
            "columnName": "published_at",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "author.login",
            "columnName": "author_login",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "author.url",
            "columnName": "author_url",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "author.avatarUrl",
            "columnName": "author_avatar_url",
            "affinity": "TEXT"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "id"
          ]
        },
        "indices": [
          {
            "name": "index_release_repo_to_check_id",
            "unique": false,
            "columnNames": [
              "repo_to_check_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_release_repo_to_check_id` ON `${TABLE_NAME}` (`repo_to_check_id`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "repo_to_check",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "repo_to_check_id"
            ],
            "referencedColumns": [
              "id"
            ]
          }
        ]
      },
      {
        "tableName": "repo_to_check",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `owner` TEXT NOT NULL, `name` TEXT NOT NULL, `group_name` TEXT, `pull_branch_regex` TEXT, `are_pull_requests_enabled` INTEGER NOT NULL, `are_releases_enabled` INTEGER NOT NULL, `are_pull_requests_notifications_enabled` INTEGER NOT NULL DEFAULT 0, `are_releases_notifications_enabled` INTEGER NOT NULL DEFAULT 0)",
        "fields": [
          {
            "fieldPath": "id",
            "columnName": "id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "owner",
            "columnName": "owner",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "name",
            "columnName": "name",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "groupName",
            "columnName": "group_name",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "pullBranchRegex",
            "columnName": "pull_branch_regex",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "arePullRequestsEnabled",
            "columnName": "are_pull_requests_enabled",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "areReleasesEnabled",
            "columnName": "are_releases_enabled",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "arePullRequestsNotificationsEnabled",
            "columnName": "are_pull_requests_notifications_enabled",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "0"
          },
          {
            "fieldPath": "areReleasesNotificationsEnabled",
            "columnName": "are_releases_notifications_enabled",
            "affinity": "INTEGER",
            "notNull": true,
            "defaultValue": "0"
          }
        ],
        "primaryKey": {
          "autoGenerate": true,
          "columnNames": [
            "id"
          ]
        }
      },
      {
        "tableName": "review",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` TEXT NOT NULL, `pull_request_id` TEXT NOT NULL, `submitted_at` TEXT, `url` TEXT NOT NULL, `state` TEXT NOT NULL, `author_login` TEXT, `author_url` TEXT, `author_avatar_url` TEXT, PRIMARY KEY(`id`), FOREIGN KEY(`pull_request_id`) REFERENCES `pull_request`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE )",
        "fields": [
          {
            "fieldPath": "id",
            "columnName": "id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "pullRequestId",
            "columnName": "pull_request_id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "submittedAt",
            "columnName": "submitted_at",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "url",
            "columnName": "url",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "state",
            "columnName": "state",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "author.login",
            "columnName": "author_login",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "author.url",
            "columnName": "author_url",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "author.avatarUrl",
            "columnName": "author_avatar_url",
            "affinity": "TEXT"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "id"
          ]
        },
        "indices": [
          {
            "name": "index_review_pull_request_id",
            "unique": false,
            "columnNames": [
              "pull_request_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_review_pull_request_id` ON `${TABLE_NAME}` (`pull_request_id`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "pull_request",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "pull_request_id"
            ],
            "referencedColumns": [
              "id"
            ]
          }
        ]
      },
      {
        "tableName": "sync_result",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `start_at` TEXT NOT NULL, `end_at` TEXT)",
        "fields": [
          {
            "fieldPath": "id",
            "columnName": "id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "startAt",
            "columnName": "start_at",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "endAt",
            "columnName": "end_at",
            "affinity": "TEXT"
          }
        ],
        "primaryKey": {
          "autoGenerate": true,
          "columnNames": [
            "id"
          ]
        }
      },
      {
        "tableName": "sync_result_entry",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, `sync_result_id` INTEGER NOT NULL, `repo_to_check_id` INTEGER, `is_success` INTEGER NOT NULL, `start_at` TEXT NOT NULL, `end_at` TEXT NOT NULL, `origin` TEXT NOT NULL, `error` TEXT, `error_message` TEXT, `ratelimit_limit` INTEGER, `ratelimit_remaining` INTEGER, `ratelimit_used` INTEGER, `ratelimit_reset` TEXT, `ratelimit_resource` TEXT, FOREIGN KEY(`sync_result_id`) REFERENCES `sync_result`(`id`) ON UPDATE NO ACTION ON DELETE CASCADE , FOREIGN KEY(`repo_to_check_id`) REFERENCES `repo_to_check`(`id`) ON UPDATE NO ACTION ON DELETE SET NULL )",
        "fields": [
          {
            "fieldPath": "id",
            "columnName": "id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "syncResultId",
            "columnName": "sync_result_id",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "repoToCheckId",
            "columnName": "repo_to_check_id",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "isSuccess",
            "columnName": "is_success",
            "affinity": "INTEGER",
            "notNull": true
          },
          {
            "fieldPath": "startAt",
            "columnName": "start_at",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "endAt",
            "columnName": "end_at",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "origin",
            "columnName": "origin",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "error",
            "columnName": "error",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "errorMessage",
            "columnName": "error_message",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "rateLimit.limit",
            "columnName": "ratelimit_limit",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "rateLimit.remaining",
            "columnName": "ratelimit_remaining",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "rateLimit.used",
            "columnName": "ratelimit_used",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "rateLimit.reset",
            "columnName": "ratelimit_reset",
            "affinity": "TEXT"
          },
          {
            "fieldPath": "rateLimit.resource",
            "columnName": "ratelimit_resource",
            "affinity": "TEXT"
          }
        ],
        "primaryKey": {
          "autoGenerate": true,
          "columnNames": [
            "id"
          ]
        },
        "indices": [
          {
            "name": "index_sync_result_entry_sync_result_id",
            "unique": false,
            "columnNames": [
              "sync_result_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_sync_result_entry_sync_result_id` ON `${TABLE_NAME}` (`sync_result_id`)"
          },
          {
            "name": "index_sync_result_entry_repo_to_check_id",
            "unique": false,
            "columnNames": [
              "repo_to_check_id"
            ],
            "orders": [],
            "createSql": "CREATE INDEX IF NOT EXISTS `index_sync_result_entry_repo_to_check_id` ON `${TABLE_NAME}` (`repo_to_check_id`)"
          }
        ],
        "foreignKeys": [
          {
            "table": "sync_result",
            "onDelete": "CASCADE",
            "onUpdate": "NO ACTION",
            "columns": [
              "sync_result_id"
            ],
            "referencedColumns": [
              "id"
            ]
          },
          {
            "table": "repo_to_check",
            "onDelete": "SET NULL",
            "onUpdate": "NO ACTION",
            "columns": [
              "repo_to_check_id"
            ],
            "referencedColumns": [
              "id"
            ]
          }
        ]
      },
      {
        "tableName": "sync_setting",
        "createSql": "CREATE TABLE IF NOT EXISTS `${TABLE_NAME}` (`id` TEXT NOT NULL, `github_pat_token` TEXT NOT NULL, `check_timeout` INTEGER, `pull_request_clean_up_timeout` INTEGER, PRIMARY KEY(`id`))",
        "fields": [
          {
            "fieldPath": "id",
            "columnName": "id",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "githubPatToken",
            "columnName": "github_pat_token",
            "affinity": "TEXT",
            "notNull": true
          },
          {
            "fieldPath": "checkTimeout",
            "columnName": "check_timeout",
            "affinity": "INTEGER"
          },
          {
            "fieldPath": "pullRequestCleanUpTimeout",
            "columnName": "pull_request_clean_up_timeout",
            "affinity": "INTEGER"
          }
        ],
        "primaryKey": {
          "autoGenerate": false,
          "columnNames": [
            "id"
          ]
        }
      }
    ],
    "setupQueries": [
      "CREATE TABLE IF NOT EXISTS room_master_table (id INTEGER PRIMARY KEY,identity_hash TEXT)",
      "INSERT OR REPLACE INTO room_master_table (id,identity_hash) VALUES(42, '8a429db38e7c1bbaa549bc5177a3df75')"
    ]
  }
}