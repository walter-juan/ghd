<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>ArgumentListWrapping:ApiToDomainMappers.kt$(lastCommitCheckRollupStatusString, CommitCheckRollupStatus.UNKNOWN)</ID>
    <ID>ArgumentListWrapping:AppProperties.kt$AppProperties$("notificationsActivityChecksFromYourPullRequestsEnabled", false)</ID>
    <ID>ArgumentListWrapping:AppProperties.kt$AppProperties$("notificationsActivityMergeableFromYourPullRequestsEnabled", false)</ID>
    <ID>ArgumentListWrapping:AppProperties.kt$AppProperties$("notificationsActivityReviewsFromYouDismissedEnabled", false)</ID>
    <ID>ArgumentListWrapping:AppProperties.kt$AppProperties$("notificationsActivityReviewsFromYourPullRequestsEnabled", false)</ID>
    <ID>ArgumentListWrapping:AppProperties.kt$AppProperties$("notificationsStateClosedFromOthersPullRequestsEnabled", false)</ID>
    <ID>ArgumentListWrapping:AppProperties.kt$AppProperties$("notificationsStateDraftFromOthersPullRequestsEnabled", false)</ID>
    <ID>ArgumentListWrapping:AppProperties.kt$AppProperties$("notificationsStateMergedFromOthersPullRequestsEnabled", false)</ID>
    <ID>ArgumentListWrapping:AppProperties.kt$AppProperties$("notificationsStateOpenFromOthersPullRequestsEnabled", false)</ID>
    <ID>ArgumentListWrapping:Cards.kt$(syncResultEntryWithRepo.syncResultEntry.duration.inWholeSeconds)</ID>
    <ID>ArgumentListWrapping:Converters.kt$Converters$(value, CommitCheckRollupStatus.UNKNOWN)</ID>
    <ID>ArgumentListWrapping:Converters.kt$Converters$(value, MergeGitHubStateStatus.UNKNOWN)</ID>
    <ID>ArgumentListWrapping:Converters.kt$Converters$(value, PullRequestState.UNKNOWN)</ID>
    <ID>ArgumentListWrapping:Converters.kt$Converters$(value, SyncResultEntry.Origin.UNKNOWN)</ID>
    <ID>ArgumentListWrapping:DbRepoToCheck.kt$DbRepoToCheck$(name = "are_pull_requests_notifications_enabled", defaultValue = "0")</ID>
    <ID>ArgumentListWrapping:DbRepoToCheck.kt$DbRepoToCheck$(name = "are_releases_notifications_enabled", defaultValue = "0")</ID>
    <ID>ArgumentListWrapping:LocalDataSourceImpl.kt$LocalDataSourceImpl$(syncResultId = syncResult.id)</ID>
    <ID>ArgumentListWrapping:Main.kt$(i18nApp.menu_bar_menu_item_synchronize, onClick = { coroutineScope.launch { synchronizer.sync() } })</ID>
    <ID>ArgumentListWrapping:NotificationsScreen.kt$NotificationsScreen$(!notificationsSettings.activityChecksFromYourPullRequestsEnabled)</ID>
    <ID>ArgumentListWrapping:NotificationsScreen.kt$NotificationsScreen$(!notificationsSettings.activityMergeableFromYourPullRequestsEnabled)</ID>
    <ID>ArgumentListWrapping:NotificationsScreen.kt$NotificationsScreen$(!notificationsSettings.activityReviewsFromYouDismissedEnabled)</ID>
    <ID>ArgumentListWrapping:NotificationsScreen.kt$NotificationsScreen$(!notificationsSettings.activityReviewsFromYourPullRequestsEnabled)</ID>
    <ID>ArgumentListWrapping:NotificationsScreen.kt$NotificationsScreen$(!notificationsSettings.stateClosedFromOthersPullRequestsEnabled)</ID>
    <ID>ArgumentListWrapping:NotificationsScreen.kt$NotificationsScreen$(!notificationsSettings.stateDraftFromOthersPullRequestsEnabled)</ID>
    <ID>ArgumentListWrapping:NotificationsScreen.kt$NotificationsScreen$(!notificationsSettings.stateMergedFromOthersPullRequestsEnabled)</ID>
    <ID>ArgumentListWrapping:NotificationsScreen.kt$NotificationsScreen$(!notificationsSettings.stateOpenFromOthersPullRequestsEnabled)</ID>
    <ID>ArgumentListWrapping:NotificationsScreen.kt$NotificationsScreen$(Act.UpdateActivityChecksFromYourPullRequestsEnabled(!notificationsSettings.activityChecksFromYourPullRequestsEnabled))</ID>
    <ID>ArgumentListWrapping:NotificationsScreen.kt$NotificationsScreen$(Act.UpdateActivityMergeableFromYourPullRequestsEnabled(!notificationsSettings.activityMergeableFromYourPullRequestsEnabled))</ID>
    <ID>ArgumentListWrapping:NotificationsScreen.kt$NotificationsScreen$(Act.UpdateActivityReviewsFromYouDismissedEnabled(!notificationsSettings.activityReviewsFromYouDismissedEnabled))</ID>
    <ID>ArgumentListWrapping:NotificationsScreen.kt$NotificationsScreen$(Act.UpdateActivityReviewsFromYourPullRequestsEnabled(!notificationsSettings.activityReviewsFromYourPullRequestsEnabled))</ID>
    <ID>ArgumentListWrapping:NotificationsScreen.kt$NotificationsScreen$(Act.UpdateStateClosedFromOthersPullRequestsEnabled(!notificationsSettings.stateClosedFromOthersPullRequestsEnabled))</ID>
    <ID>ArgumentListWrapping:NotificationsScreen.kt$NotificationsScreen$(Act.UpdateStateDraftFromOthersPullRequestsEnabled(!notificationsSettings.stateDraftFromOthersPullRequestsEnabled))</ID>
    <ID>ArgumentListWrapping:NotificationsScreen.kt$NotificationsScreen$(Act.UpdateStateMergedFromOthersPullRequestsEnabled(!notificationsSettings.stateMergedFromOthersPullRequestsEnabled))</ID>
    <ID>ArgumentListWrapping:NotificationsScreen.kt$NotificationsScreen$(Act.UpdateStateOpenFromOthersPullRequestsEnabled(!notificationsSettings.stateOpenFromOthersPullRequestsEnabled))</ID>
    <ID>ArgumentListWrapping:NotificationsScreen.kt$NotificationsScreen$(containerColor = MaterialTheme.colorScheme.primary)</ID>
    <ID>ArgumentListWrapping:NotificationsViewModel.kt$NotificationsStateMachine$(this)</ID>
    <ID>ArgumentListWrapping:Others.kt$(space = 8.dp, alignment = Alignment.CenterHorizontally)</ID>
    <ID>ArgumentListWrapping:OutlinedSelectField.kt$(25.dp)</ID>
    <ID>ArgumentListWrapping:OutlinedSelectField.kt$(textFieldTrailingIcon, contentDescription = null, modifier = Modifier.size(25.dp))</ID>
    <ID>ArgumentListWrapping:PullRequestServiceActivityNotificationsUnitTest.kt$PullRequestServiceActivityNotificationsUnitTest$("when activityEnabledOption is FILTERED but all notifications disabled then sendNotifications with all pull requests and reviews from filtered username should not send notifications")</ID>
    <ID>ArgumentListWrapping:PullRequestServiceActivityNotificationsUnitTest.kt$PullRequestServiceActivityNotificationsUnitTest$("when activityEnabledOption is FILTERED then sendNotifications with all pull requests and reviews from filtered username")</ID>
    <ID>ArgumentListWrapping:PullRequestServiceActivityNotificationsUnitTest.kt$PullRequestServiceActivityNotificationsUnitTest$("when activityEnabledOption is FILTERED then sendNotifications with all pull requests and reviews from other authors")</ID>
    <ID>ArgumentListWrapping:PullRequestServiceImpl.kt$PullRequestServiceImpl$("Synchronizer :: sync :: pulls :: fetch remote took ${(Clock.System.now() - prSyncStartAt).inWholeMilliseconds} ms")</ID>
    <ID>ArgumentListWrapping:PullRequestServiceImpl.kt$PullRequestServiceImpl$("Synchronizer :: sync :: pulls :: finish took ${(Clock.System.now() - prSyncStartAt).inWholeMilliseconds} ms")</ID>
    <ID>ArgumentListWrapping:PullRequestServiceImpl.kt$PullRequestServiceImpl$("Synchronizer :: sync :: pulls :: send activity notification :: ${appSettings.notificationsSettings.activityEnabledOption} option selected")</ID>
    <ID>ArgumentListWrapping:PullRequestServiceImpl.kt$PullRequestServiceImpl$("Synchronizer :: sync :: pulls :: send activity notification :: send checks notification, pull id ${pullRequestWithRepo.pullRequest.id}")</ID>
    <ID>ArgumentListWrapping:PullRequestServiceImpl.kt$PullRequestServiceImpl$("Synchronizer :: sync :: pulls :: send activity notification :: send mergeable notification, pull id ${pullRequestWithRepo.pullRequest.id}")</ID>
    <ID>ArgumentListWrapping:PullRequestServiceImpl.kt$PullRequestServiceImpl$("Synchronizer :: sync :: pulls :: send activity notification :: send new review notification, pull id ${pullRequest.id}, review id ${review.id}, review state ${review.state}")</ID>
    <ID>ArgumentListWrapping:PullRequestServiceImpl.kt$PullRequestServiceImpl$("Synchronizer :: sync :: pulls :: send activity notification :: send your review deleted notification, pull id ${pullRequestWithRepo.pullRequest.id}")</ID>
    <ID>ArgumentListWrapping:PullRequestServiceImpl.kt$PullRequestServiceImpl$("Synchronizer :: sync :: pulls :: send activity notification :: send your review state changed notification, pull id ${pullRequestWithRepo.pullRequest.id}")</ID>
    <ID>ArgumentListWrapping:PullRequestServiceImpl.kt$PullRequestServiceImpl$("Synchronizer :: sync :: pulls :: send state notification :: ${appSettings.notificationsSettings.stateEnabledOption} option selected")</ID>
    <ID>ArgumentListWrapping:PullRequestServiceImpl.kt$PullRequestServiceImpl$("Synchronizer :: sync :: pulls :: send state notification :: send new pull request notification, pull id ${pullRequestWithRepo.pullRequest.id}")</ID>
    <ID>ArgumentListWrapping:PullRequestServiceImpl.kt$PullRequestServiceImpl$(appSettings = appSettings, oldPullRequestsWithReviews = pullRequestsBefore, newPullRequestsWithReviews = pullRequestsAfter)</ID>
    <ID>ArgumentListWrapping:PullRequestServiceStateNotificationsUnitTest.kt$PullRequestServiceStateNotificationsUnitTest$(repoToCheck = repoToCheck, pullRequest = draftPullRequestFromFilteredUsername)</ID>
    <ID>ArgumentListWrapping:PullRequestServiceStateNotificationsUnitTest.kt$PullRequestServiceStateNotificationsUnitTest$(repoToCheck = repoToCheck, pullRequest = mergedPullRequest)</ID>
    <ID>ArgumentListWrapping:PullRequestServiceStateNotificationsUnitTest.kt$PullRequestServiceStateNotificationsUnitTest$(repoToCheck = repoToCheck, pullRequest = newClosedPullRequest)</ID>
    <ID>ArgumentListWrapping:PullRequestServiceStateNotificationsUnitTest.kt$PullRequestServiceStateNotificationsUnitTest$(repoToCheck = repoToCheck, pullRequest = newDraftPullRequest)</ID>
    <ID>ArgumentListWrapping:PullRequestServiceStateNotificationsUnitTest.kt$PullRequestServiceStateNotificationsUnitTest$(repoToCheck = repoToCheck, pullRequest = newMergedPullRequest)</ID>
    <ID>ArgumentListWrapping:PullRequestServiceStateNotificationsUnitTest.kt$PullRequestServiceStateNotificationsUnitTest$(repoToCheck = repoToCheck, pullRequest = oldDraftPullRequest)</ID>
    <ID>ArgumentListWrapping:PullRequestServiceStateNotificationsUnitTest.kt$PullRequestServiceStateNotificationsUnitTest$(repoToCheck = repoToCheck, pullRequest = oldOpenPullRequest)</ID>
    <ID>ArgumentListWrapping:PullRequestServiceStateNotificationsUnitTest.kt$PullRequestServiceStateNotificationsUnitTest$(repoToCheck = repoToCheck, pullRequest = oldPullRequestWithoutChanges)</ID>
    <ID>ArgumentListWrapping:PullRequestServiceStateNotificationsUnitTest.kt$PullRequestServiceStateNotificationsUnitTest$(repoToCheck = repoToCheck, pullRequest = openPullRequest)</ID>
    <ID>ArgumentListWrapping:PullRequestServiceStateNotificationsUnitTest.kt$PullRequestServiceStateNotificationsUnitTest$(repoToCheck = repoToCheck, pullRequest = pullRequestWithoutChanges)</ID>
    <ID>ArgumentListWrapping:PullRequestsViewModel.kt$PullRequestsStateMachine$(it)</ID>
    <ID>ArgumentListWrapping:ReleaseServiceImpl.kt$ReleaseServiceImpl$("Synchronizer :: sync :: releases :: fetch remote took ${(Clock.System.now() - releasesSyncStartAt).inWholeMilliseconds} ms")</ID>
    <ID>ArgumentListWrapping:ReleaseServiceImpl.kt$ReleaseServiceImpl$("Synchronizer :: sync :: releases :: finish took ${(Clock.System.now() - releasesSyncStartAt).inWholeMilliseconds} ms")</ID>
    <ID>ArgumentListWrapping:ReleaseServiceImpl.kt$ReleaseServiceImpl$("Synchronizer :: sync :: releases :: send notification :: send new release notification, release tag ${newRelease.release.tagName}")</ID>
    <ID>ArgumentListWrapping:ReleasesViewModel.kt$ReleasesStateMachine$(it)</ID>
    <ID>ArgumentListWrapping:RepoToCheckEditScreen.kt$RepoToCheckEditScreen$(containerColor = MaterialTheme.colorScheme.primary)</ID>
    <ID>ArgumentListWrapping:RepoToCheckEditScreen.kt$RepoToCheckEditScreen$(state.repoToCheck.arePullRequestsNotificationsEnabled)</ID>
    <ID>ArgumentListWrapping:RepoToCheckEditScreen.kt$RepoToCheckEditScreen$(state.repoToCheck.areReleasesNotificationsEnabled)</ID>
    <ID>ArgumentListWrapping:RepoToCheckEditViewModel.kt$RepoToCheckEditStateMachine$(owner = action.owner, name = action.name)</ID>
    <ID>ArgumentListWrapping:RepoToCheckEditViewModel.kt$RepoToCheckEditStateMachine$(this)</ID>
    <ID>ArgumentListWrapping:ReposToCheckScreen.kt$ReposToCheckScreen$(25.dp)</ID>
    <ID>ArgumentListWrapping:ReposToCheckScreen.kt$ReposToCheckScreen$(ReposToCheckStateMachine.Act.DeleteRepoToCheck(repoToCheckToDelete!!))</ID>
    <ID>ArgumentListWrapping:ReposToCheckScreen.kt$ReposToCheckScreen$(containerColor = MaterialTheme.colorScheme.primary)</ID>
    <ID>ArgumentListWrapping:ReposToCheckScreen.kt$ReposToCheckScreen$(imageVector = Tabler.Outline.CircleX, contentDescription = null, modifier = Modifier.size(25.dp))</ID>
    <ID>ArgumentListWrapping:ReposToCheckScreen.kt$ReposToCheckScreen$(repoToCheckToDelete!!)</ID>
    <ID>ArgumentListWrapping:ReposToCheckScreen.kt$ReposToCheckScreen$(space = AppDimens.cardHorizontalSpaceBetween, alignment = Alignment.CenterHorizontally)</ID>
    <ID>ArgumentListWrapping:ReposToCheckViewModel.kt$ReposToCheckStateMachine$(it)</ID>
    <ID>ArgumentListWrapping:ReposToCheckViewModel.kt$ReposToCheckStateMachine$(searchQuery, ignoreCase = true)</ID>
    <ID>ArgumentListWrapping:Screen.kt$(enabled = onSubtitleClick != null, onClick = { onSubtitleClick?.invoke() })</ID>
    <ID>ArgumentListWrapping:SearchRepositoryScreen.kt$SearchRepositoryScreen$(25.dp)</ID>
    <ID>ArgumentListWrapping:SearchRepositoryScreen.kt$SearchRepositoryScreen$(icon = Tabler.Outline.TextRecognition, text = searchQuery, onTextChanged = onSearchQueryChanged)</ID>
    <ID>ArgumentListWrapping:SearchRepositoryScreen.kt$SearchRepositoryScreen$(imageVector = Tabler.Outline.CircleX, contentDescription = null, modifier = Modifier.size(25.dp))</ID>
    <ID>ArgumentListWrapping:SearchRepositoryScreen.kt$SearchRepositoryScreen$(imageVector = Tabler.Outline.Search, contentDescription = null, modifier = Modifier.size(25.dp))</ID>
    <ID>ArgumentListWrapping:SearchRepositoryScreen.kt$SearchRepositoryScreen$(space = AppDimens.cardHorizontalSpaceBetween, alignment = Alignment.CenterHorizontally)</ID>
    <ID>ArgumentListWrapping:SettingsScreen.kt$SettingsScreen$(25.dp)</ID>
    <ID>ArgumentListWrapping:SettingsScreen.kt$SettingsScreen$(containerColor = MaterialTheme.colorScheme.primary)</ID>
    <ID>ArgumentListWrapping:SettingsScreen.kt$SettingsScreen$(imageVector = image, contentDescription = description, modifier = Modifier.size(25.dp))</ID>
    <ID>ArgumentListWrapping:SettingsScreen.kt$SettingsScreen$(message = snackbarMessage, withDismissAction = true, duration = SnackbarDuration.Indefinite)</ID>
    <ID>ArgumentListWrapping:SettingsScreen.kt$SettingsScreen$(null to i18nUi.app_theme_system_default, true to i18nUi.app_theme_dark, false to i18nUi.app_theme_light)</ID>
    <ID>ArgumentListWrapping:SettingsViewModel.kt$SettingsStateMachine$(this)</ID>
    <ID>ArgumentListWrapping:SyncResultDecorator.kt$SyncResultDecorator$(syncResultWithEntities.errorPercentage, syncResultWithEntities.entriesSize)</ID>
    <ID>ArgumentListWrapping:SyncResultDecorator.kt$SyncResultDecorator$(syncResultWithEntities.syncResult.startAt, rateLimit?.percentageUsed, rateLimit?.reset)</ID>
    <ID>ArgumentListWrapping:SyncResultsScreen.kt$SyncResultsScreen$(space = AppDimens.cardHorizontalSpaceBetween, alignment = Alignment.CenterHorizontally)</ID>
    <ID>ArgumentListWrapping:SynchronizerImpl.kt$SynchronizerImpl$("Synchronizer :: sync :: finished, from ${syncResult.syncResult.startAt} to ${syncResult.syncResult.endAt} for ${allReposToCheck.count()} repos to check it took ${syncResult.syncResult.duration?.inWholeMilliseconds} millis to download the pull requests and repositories with ${syncResult.errorPercentage}% of errors meaning a ${syncResult.status} status")</ID>
    <ID>ArgumentListWrapping:SynchronizerImpl.kt$SynchronizerImpl$(endAt = Clock.System.now())</ID>
    <ID>ArgumentListWrapping:SynchronizerImpl.kt$SynchronizerImpl$(syncResult = syncResultFinish, error = "Invalid data", message = "GitHub token is not set")</ID>
    <ID>ArgumentListWrapping:SynchronizerImpl.kt$SynchronizerImpl$(syncResult = syncResultFinish, error = "Unknown error", message = "Synchronization settings are null")</ID>
    <ID>ArgumentListWrapping:SynchronizerImpl.kt$SynchronizerImpl$(syncResult.copy(endAt = Clock.System.now()))</ID>
    <ID>ClassNaming:i18nApp.kt$i18nApp</ID>
    <ID>ClassNaming:i18nCore.kt$i18nCore</ID>
    <ID>ClassNaming:i18nUi.kt$i18nUi</ID>
    <ID>CyclomaticComplexMethod:PullRequestServiceImpl.kt$PullRequestServiceImpl$override suspend fun sendActivityNotifications(appSettings: AppSettings, oldPullRequestsWithReviews: List&lt;PullRequestWithRepoAndReviews&gt;, newPullRequestsWithReviews: List&lt;PullRequestWithRepoAndReviews&gt;): Result&lt;Unit&gt;</ID>
    <ID>Filename:i18nApp.kt$com.woowla.ghd.app.i18nApp.kt</ID>
    <ID>Filename:i18nCore.kt$com.woowla.ghd.core.i18nCore.kt</ID>
    <ID>Filename:i18nUi.kt$com.woowla.ghd.presentation.i18nUi.kt</ID>
    <ID>LongMethod:AboutScreen.kt$AboutScreen$@Composable fun Content( viewModel: AboutViewModel, appVersion: String, onAboutLicensesClick: (() -&gt; Unit), onBackClick: (() -&gt; Unit)? = null, )</ID>
    <ID>LongMethod:App.kt$@Composable fun App()</ID>
    <ID>LongMethod:Cards.kt$@OptIn(ExperimentalLayoutApi::class) @Composable fun PullRequestCard( pullRequestWithReviews: PullRequestWithRepoAndReviews, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:Cards.kt$@OptIn(ExperimentalLayoutApi::class) @Composable fun RepoToCheckCard( repoToCheck: RepoToCheck, onOpenClick: (RepoToCheck) -&gt; Unit, onEditClick: (RepoToCheck) -&gt; Unit, onDeleteClick: (RepoToCheck) -&gt; Unit, modifier: Modifier = Modifier, )</ID>
    <ID>LongMethod:HomeScreen.kt$HomeScreen$@Composable fun Content()</ID>
    <ID>LongMethod:NotificationsScreen.kt$NotificationsScreen$@Composable private fun NotificationsContent( state: St.Success, dispatchAction: (Act) -&gt; Unit, )</ID>
    <ID>LongMethod:OutlinedSelectField.kt$@Composable fun &lt;T : Any?&gt; OutlinedSelectField( values: List&lt;Pair&lt;T, String&gt;&gt;, selected: T? = null, emptyText: String = "", modifier: Modifier = Modifier, onSelected: (T, String) -&gt; Unit, )</ID>
    <ID>LongMethod:PullRequestServiceActivityNotificationsUnitTest.kt$PullRequestServiceActivityNotificationsUnitTest$fun buildActivityChangedPullRequests( pullRequestsAuthorUsername: String = "author-login", reviewsAuthorUsername: String = "author-login", ): Pair&lt;List&lt;PullRequestWithRepoAndReviews&gt;, List&lt;PullRequestWithRepoAndReviews&gt;&gt;</ID>
    <ID>LongMethod:PullRequestServiceImpl.kt$PullRequestServiceImpl$override suspend fun sendActivityNotifications(appSettings: AppSettings, oldPullRequestsWithReviews: List&lt;PullRequestWithRepoAndReviews&gt;, newPullRequestsWithReviews: List&lt;PullRequestWithRepoAndReviews&gt;): Result&lt;Unit&gt;</ID>
    <ID>LongMethod:PullRequestServiceStateNotificationsUnitTest.kt$PullRequestServiceStateNotificationsUnitTest$fun buildActivityChangedPullRequests( filteredUsername: String = "filtered-username-login", otherUsername: String = "other-username-login", ): Pair&lt;List&lt;PullRequestWithRepoAndReviews&gt;, List&lt;PullRequestWithRepoAndReviews&gt;&gt;</ID>
    <ID>LongMethod:RepoToCheckBulkScreen.kt$RepoToCheckBulkScreen$@Composable fun Content( viewModel: ReposToCheckBulkViewModel, onBackClick: (() -&gt; Unit), )</ID>
    <ID>LongMethod:RepoToCheckEditScreen.kt$RepoToCheckEditScreen$@Composable private fun RepositorySection( owner: String, name: String, groupName: String, mode: RepoToCheckEditStateMachine.Mode, focusRequester: FocusRequester, onOwnerChange: (String) -&gt; Unit, onNameChange: (String) -&gt; Unit, onReleaseGroupChange: (String) -&gt; Unit, onSearchRepository: (owner: String, name: String) -&gt; Unit, )</ID>
    <ID>LongMethod:RepoToCheckEditScreen.kt$RepoToCheckEditScreen$@Composable private fun Success( state: St.Success, dispatchAction: (Act) -&gt; Unit, onSearchRepository: (owner: String, name: String) -&gt; Unit, onBackClick: () -&gt; Unit )</ID>
    <ID>LongMethod:ReposToCheckScreen.kt$ReposToCheckScreen$@Composable fun Content( viewModel: ReposToCheckViewModel, onEditRepoClick: (RepoToCheck) -&gt; Unit, onAddNewRepoClick: () -&gt; Unit, onBulkClick: () -&gt; Unit, )</ID>
    <ID>LongMethod:SettingsScreen.kt$SettingsScreen$@Composable private fun Screen( state: St?, dispatchAction: (Act) -&gt; Unit, onSyncResultsClicked: () -&gt; Unit, )</ID>
    <ID>LongMethod:SettingsScreen.kt$SettingsScreen$@Composable private fun SynchronizationSection( githubPatToken: String, onGithubPatTokenUpdated: (String) -&gt; Unit, selectedCheckTimeoutMinutes: Long, availableCheckTimeoutMinutes: List&lt;Pair&lt;Long, String&gt;&gt;, onCheckTimeoutMinutes: (Long) -&gt; Unit, selectedCleanUpTimeoutHours: Long, availableCleanUpTimeoutHours: List&lt;Pair&lt;Long, String&gt;&gt;, onCleanUpTimeoutHours: (Long) -&gt; Unit, onSyncResultsClicked: () -&gt; Unit, )</ID>
    <ID>MagicNumber:Main.kt$7</ID>
    <ID>MagicNumber:NotificationsScreen.kt$NotificationsScreen$.30f</ID>
    <ID>MagicNumber:NotificationsScreen.kt$NotificationsScreen$.35f</ID>
    <ID>MagicNumber:Sections.kt$0.5F</ID>
    <ID>MagicNumber:SplashScreen.kt$SplashScreen$100</ID>
    <ID>MagicNumber:String.kt$0.65F</ID>
    <ID>MagicNumber:SyncResultWithEntriesAndRepos.kt$SyncResultWithEntriesAndRepos$100</ID>
    <ID>MagicNumber:SyncResultWithEntriesAndRepos.kt$SyncResultWithEntriesAndRepos$25</ID>
    <ID>MagicNumber:SyncResultWithEntriesAndRepos.kt$SyncResultWithEntriesAndRepos$5</ID>
    <ID>MagicNumber:SynchronizerImpl.kt$SynchronizerImpl$150</ID>
    <ID>MaxLineLength:AboutScreen.kt$AboutScreen$description = "GHD (GitHub dashboard) is designed to display your GitHub pull requests and release updates in a streamlined interface."</ID>
    <ID>MaxLineLength:AppProperties.kt$AppProperties$var notificationsActivityChecksFromYourPullRequestsEnabled: Boolean by settings.boolean("notificationsActivityChecksFromYourPullRequestsEnabled", false)</ID>
    <ID>MaxLineLength:AppProperties.kt$AppProperties$var notificationsActivityMergeableFromYourPullRequestsEnabled: Boolean by settings.boolean("notificationsActivityMergeableFromYourPullRequestsEnabled", false)</ID>
    <ID>MaxLineLength:AppProperties.kt$AppProperties$var notificationsActivityReviewsFromYourPullRequestsEnabled: Boolean by settings.boolean("notificationsActivityReviewsFromYourPullRequestsEnabled", false)</ID>
    <ID>MaxLineLength:AppProperties.kt$AppProperties$var notificationsStateClosedFromOthersPullRequestsEnabled: Boolean by settings.boolean("notificationsStateClosedFromOthersPullRequestsEnabled", false)</ID>
    <ID>MaxLineLength:AppProperties.kt$AppProperties$var notificationsStateDraftFromOthersPullRequestsEnabled: Boolean by settings.boolean("notificationsStateDraftFromOthersPullRequestsEnabled", false)</ID>
    <ID>MaxLineLength:AppProperties.kt$AppProperties$var notificationsStateMergedFromOthersPullRequestsEnabled: Boolean by settings.boolean("notificationsStateMergedFromOthersPullRequestsEnabled", false)</ID>
    <ID>MaxLineLength:Enum.kt$* Returns an enum entry with specified name, or the result of [defaultValue] function if the specified name does not match any of the enum constants defined in the class.</ID>
    <ID>MaxLineLength:LocalDataSourceImpl.kt$LocalDataSourceImpl$activityEnabledOption = enumValueOfOrNull&lt;NotificationsSettings.EnabledOption&gt;(appProperties.notificationsActivityEnabledOption) ?: defaultEnabledOption</ID>
    <ID>MaxLineLength:LocalDataSourceImpl.kt$LocalDataSourceImpl$appProperties.notificationsActivityChecksFromYourPullRequestsEnabled = appSettings.notificationsSettings.activityChecksFromYourPullRequestsEnabled</ID>
    <ID>MaxLineLength:LocalDataSourceImpl.kt$LocalDataSourceImpl$appProperties.notificationsActivityMergeableFromYourPullRequestsEnabled = appSettings.notificationsSettings.activityMergeableFromYourPullRequestsEnabled</ID>
    <ID>MaxLineLength:LocalDataSourceImpl.kt$LocalDataSourceImpl$appProperties.notificationsActivityReviewsFromYouDismissedEnabled = appSettings.notificationsSettings.activityReviewsFromYouDismissedEnabled</ID>
    <ID>MaxLineLength:LocalDataSourceImpl.kt$LocalDataSourceImpl$appProperties.notificationsActivityReviewsFromYourPullRequestsEnabled = appSettings.notificationsSettings.activityReviewsFromYourPullRequestsEnabled</ID>
    <ID>MaxLineLength:LocalDataSourceImpl.kt$LocalDataSourceImpl$appProperties.notificationsStateClosedFromOthersPullRequestsEnabled = appSettings.notificationsSettings.stateClosedFromOthersPullRequestsEnabled</ID>
    <ID>MaxLineLength:LocalDataSourceImpl.kt$LocalDataSourceImpl$appProperties.notificationsStateDraftFromOthersPullRequestsEnabled = appSettings.notificationsSettings.stateDraftFromOthersPullRequestsEnabled</ID>
    <ID>MaxLineLength:LocalDataSourceImpl.kt$LocalDataSourceImpl$appProperties.notificationsStateMergedFromOthersPullRequestsEnabled = appSettings.notificationsSettings.stateMergedFromOthersPullRequestsEnabled</ID>
    <ID>MaxLineLength:LocalDataSourceImpl.kt$LocalDataSourceImpl$appProperties.notificationsStateOpenFromOthersPullRequestsEnabled = appSettings.notificationsSettings.stateOpenFromOthersPullRequestsEnabled</ID>
    <ID>MaxLineLength:LocalDataSourceImpl.kt$LocalDataSourceImpl$stateEnabledOption = enumValueOfOrNull&lt;NotificationsSettings.EnabledOption&gt;(appProperties.notificationsStateEnabledOption) ?: defaultEnabledOption</ID>
    <ID>MaxLineLength:NotificationsScreen.kt$NotificationsScreen$description = "Add your login username in order to have a better notifications. Adding your username will enable the specific notifications."</ID>
    <ID>MaxLineLength:NotificationsScreen.kt$NotificationsScreen$description = "You will be notified when a new review has been proposed to your pull requests and/or when a review from you is dismissed."</ID>
    <ID>MaxLineLength:NotificationsScreen.kt$NotificationsScreen$dispatchAction.invoke(Act.UpdateActivityChecksFromYourPullRequestsEnabled(!notificationsSettings.activityChecksFromYourPullRequestsEnabled))</ID>
    <ID>MaxLineLength:NotificationsScreen.kt$NotificationsScreen$dispatchAction.invoke(Act.UpdateActivityMergeableFromYourPullRequestsEnabled(!notificationsSettings.activityMergeableFromYourPullRequestsEnabled))</ID>
    <ID>MaxLineLength:NotificationsScreen.kt$NotificationsScreen$dispatchAction.invoke(Act.UpdateActivityReviewsFromYouDismissedEnabled(!notificationsSettings.activityReviewsFromYouDismissedEnabled))</ID>
    <ID>MaxLineLength:NotificationsScreen.kt$NotificationsScreen$dispatchAction.invoke(Act.UpdateActivityReviewsFromYourPullRequestsEnabled(!notificationsSettings.activityReviewsFromYourPullRequestsEnabled))</ID>
    <ID>MaxLineLength:NotificationsScreen.kt$NotificationsScreen$dispatchAction.invoke(Act.UpdateStateClosedFromOthersPullRequestsEnabled(!notificationsSettings.stateClosedFromOthersPullRequestsEnabled))</ID>
    <ID>MaxLineLength:NotificationsScreen.kt$NotificationsScreen$dispatchAction.invoke(Act.UpdateStateDraftFromOthersPullRequestsEnabled(!notificationsSettings.stateDraftFromOthersPullRequestsEnabled))</ID>
    <ID>MaxLineLength:NotificationsScreen.kt$NotificationsScreen$dispatchAction.invoke(Act.UpdateStateMergedFromOthersPullRequestsEnabled(!notificationsSettings.stateMergedFromOthersPullRequestsEnabled))</ID>
    <ID>MaxLineLength:NotificationsScreen.kt$NotificationsScreen$dispatchAction.invoke(Act.UpdateStateOpenFromOthersPullRequestsEnabled(!notificationsSettings.stateOpenFromOthersPullRequestsEnabled))</ID>
    <ID>MaxLineLength:NotificationsViewModel.kt$NotificationsStateMachine$state.mutate { St.Success.appSettings.notificationsSettings.activityChecksFromYourPullRequestsEnabled.modify(this) { action.enabled } }</ID>
    <ID>MaxLineLength:NotificationsViewModel.kt$NotificationsStateMachine$state.mutate { St.Success.appSettings.notificationsSettings.activityMergeableFromYourPullRequestsEnabled.modify(this) { action.enabled } }</ID>
    <ID>MaxLineLength:NotificationsViewModel.kt$NotificationsStateMachine$state.mutate { St.Success.appSettings.notificationsSettings.activityReviewsFromYouDismissedEnabled.modify(this) { action.enabled } }</ID>
    <ID>MaxLineLength:NotificationsViewModel.kt$NotificationsStateMachine$state.mutate { St.Success.appSettings.notificationsSettings.activityReviewsFromYourPullRequestsEnabled.modify(this) { action.enabled } }</ID>
    <ID>MaxLineLength:NotificationsViewModel.kt$NotificationsStateMachine$state.mutate { St.Success.appSettings.notificationsSettings.stateClosedFromOthersPullRequestsEnabled.modify(this) { action.enabled } }</ID>
    <ID>MaxLineLength:NotificationsViewModel.kt$NotificationsStateMachine$state.mutate { St.Success.appSettings.notificationsSettings.stateDraftFromOthersPullRequestsEnabled.modify(this) { action.enabled } }</ID>
    <ID>MaxLineLength:NotificationsViewModel.kt$NotificationsStateMachine$state.mutate { St.Success.appSettings.notificationsSettings.stateMergedFromOthersPullRequestsEnabled.modify(this) { action.enabled } }</ID>
    <ID>MaxLineLength:NotificationsViewModel.kt$NotificationsStateMachine$state.mutate { St.Success.appSettings.notificationsSettings.stateOpenFromOthersPullRequestsEnabled.modify(this) { action.enabled } }</ID>
    <ID>MaxLineLength:PullRequest.kt$PullRequest$val checkHaveErrors = lastCommitCheckRollupStatus == CommitCheckRollupStatus.ERROR || lastCommitCheckRollupStatus == CommitCheckRollupStatus.FAILURE || lastCommitCheckRollupStatus == CommitCheckRollupStatus.UNKNOWN</ID>
    <ID>MaxLineLength:PullRequestServiceActivityNotificationsUnitTest.kt$PullRequestServiceActivityNotificationsUnitTest$context</ID>
    <ID>MaxLineLength:PullRequestServiceImpl.kt$PullRequestServiceImpl$*</ID>
    <ID>MaxLineLength:PullRequestServiceImpl.kt$PullRequestServiceImpl$appLogger.d("Synchronizer :: sync :: pulls :: send activity notification :: ${appSettings.notificationsSettings.activityEnabledOption} option selected")</ID>
    <ID>MaxLineLength:PullRequestServiceImpl.kt$PullRequestServiceImpl$appLogger.d("Synchronizer :: sync :: pulls :: send activity notification :: send checks notification, pull id ${pullRequestWithRepo.pullRequest.id}")</ID>
    <ID>MaxLineLength:PullRequestServiceImpl.kt$PullRequestServiceImpl$appLogger.d("Synchronizer :: sync :: pulls :: send activity notification :: send mergeable notification, pull id ${pullRequestWithRepo.pullRequest.id}")</ID>
    <ID>MaxLineLength:PullRequestServiceImpl.kt$PullRequestServiceImpl$appLogger.d("Synchronizer :: sync :: pulls :: send activity notification :: send new review notification, pull id ${pullRequest.id}, review id ${review.id}, review state ${review.state}")</ID>
    <ID>MaxLineLength:PullRequestServiceImpl.kt$PullRequestServiceImpl$appLogger.d("Synchronizer :: sync :: pulls :: send activity notification :: send your review deleted notification, pull id ${pullRequestWithRepo.pullRequest.id}")</ID>
    <ID>MaxLineLength:PullRequestServiceImpl.kt$PullRequestServiceImpl$appLogger.d("Synchronizer :: sync :: pulls :: send activity notification :: send your review state changed notification, pull id ${pullRequestWithRepo.pullRequest.id}")</ID>
    <ID>MaxLineLength:PullRequestServiceImpl.kt$PullRequestServiceImpl$appLogger.d("Synchronizer :: sync :: pulls :: send state notification :: ${appSettings.notificationsSettings.stateEnabledOption} option selected")</ID>
    <ID>MaxLineLength:PullRequestServiceImpl.kt$PullRequestServiceImpl$appLogger.d("Synchronizer :: sync :: pulls :: send state notification :: send new pull request notification, pull id ${pullRequestWithRepo.pullRequest.id}")</ID>
    <ID>MaxLineLength:PullRequestServiceImpl.kt$PullRequestServiceImpl$override suspend</ID>
    <ID>MaxLineLength:PullRequestServiceImpl.kt$PullRequestServiceImpl$private</ID>
    <ID>MaxLineLength:PullRequestServiceImpl.kt$PullRequestServiceImpl$sendNotifications(appSettings = appSettings, oldPullRequestsWithReviews = pullRequestsBefore, newPullRequestsWithReviews = pullRequestsAfter)</ID>
    <ID>MaxLineLength:PullRequestServiceImpl.kt$PullRequestServiceImpl$val mergeStateStatusChanged = oldPullRequestWithRepo.pullRequest.mergeStateStatus != newPullRequestWithRepo.pullRequest.mergeStateStatus</ID>
    <ID>MaxLineLength:PullRequestServiceStateNotificationsUnitTest.kt$PullRequestServiceStateNotificationsUnitTest$val draftPullRequestWithReviewsFromFilteredUsername = RandomEntities.pullRequestWithRepoAndReviews(repoToCheck = repoToCheck, pullRequest = draftPullRequestFromFilteredUsername)</ID>
    <ID>MaxLineLength:PullRequestServiceStateNotificationsUnitTest.kt$PullRequestServiceStateNotificationsUnitTest$val newClosedPullRequestWithReviews = RandomEntities.pullRequestWithRepoAndReviews(repoToCheck = repoToCheck, pullRequest = newClosedPullRequest)</ID>
    <ID>MaxLineLength:PullRequestServiceStateNotificationsUnitTest.kt$PullRequestServiceStateNotificationsUnitTest$val newDraftPullRequestWithReviews = RandomEntities.pullRequestWithRepoAndReviews(repoToCheck = repoToCheck, pullRequest = newDraftPullRequest)</ID>
    <ID>MaxLineLength:PullRequestServiceStateNotificationsUnitTest.kt$PullRequestServiceStateNotificationsUnitTest$val newMergedPullRequestWithReviews = RandomEntities.pullRequestWithRepoAndReviews(repoToCheck = repoToCheck, pullRequest = newMergedPullRequest)</ID>
    <ID>MaxLineLength:PullRequestServiceStateNotificationsUnitTest.kt$PullRequestServiceStateNotificationsUnitTest$val oldDraftPullRequestWithReviews = RandomEntities.pullRequestWithRepoAndReviews(repoToCheck = repoToCheck, pullRequest = oldDraftPullRequest)</ID>
    <ID>MaxLineLength:PullRequestServiceStateNotificationsUnitTest.kt$PullRequestServiceStateNotificationsUnitTest$val oldPullRequestWithoutChangesWithReviews = RandomEntities.pullRequestWithRepoAndReviews(repoToCheck = repoToCheck, pullRequest = oldPullRequestWithoutChanges)</ID>
    <ID>MaxLineLength:PullRequestServiceStateNotificationsUnitTest.kt$PullRequestServiceStateNotificationsUnitTest$val pullRequestWithoutChangesWithReviews = RandomEntities.pullRequestWithRepoAndReviews(repoToCheck = repoToCheck, pullRequest = pullRequestWithoutChanges)</ID>
    <ID>MaxLineLength:PullRequestsViewModel.kt$PullRequestsStateMachine$stateExtendedFiltersSelectedRecalculated.isEmpty() || stateExtendedFiltersSelectedRecalculated.contains(it.pullRequest.stateExtended)</ID>
    <ID>MaxLineLength:ReleaseServiceImpl.kt$ReleaseServiceImpl$appLogger.d("Synchronizer :: sync :: releases :: send notification :: send new release notification, release tag ${newRelease.release.tagName}")</ID>
    <ID>MaxLineLength:ReleaseServiceImpl.kt$ReleaseServiceImpl$override suspend</ID>
    <ID>MaxLineLength:SettingsScreen.kt$SettingsScreen$availableThemes = listOf(null to i18nUi.app_theme_system_default, true to i18nUi.app_theme_dark, false to i18nUi.app_theme_light)</ID>
    <ID>MaxLineLength:SettingsScreen.kt$SettingsScreen$val result = snackbarHostState.showSnackbar(message = snackbarMessage, withDismissAction = true, duration = SnackbarDuration.Indefinite)</ID>
    <ID>MaxLineLength:SyncResultDecorator.kt$SyncResultDecorator$text = i18nUi.top_bar_subtitle_synchronization_result_entries(syncResultWithEntities.errorPercentage, syncResultWithEntities.entriesSize)</ID>
    <ID>MaxLineLength:SynchronizerImpl.kt$SynchronizerImpl$appLogger.d("Synchronizer :: sync :: finished, from ${syncResult.syncResult.startAt} to ${syncResult.syncResult.endAt} for ${allReposToCheck.count()} repos to check it took ${syncResult.syncResult.duration?.inWholeMilliseconds} millis to download the pull requests and repositories with ${syncResult.errorPercentage}% of errors meaning a ${syncResult.status} status")</ID>
    <ID>MaxLineLength:i18nUi.kt$i18nUi$val</ID>
    <ID>MaxLineLength:i18nUi.kt$i18nUi$val screen_app_settings_github_token_item_description = "Configure your GitHub Personal Access Token for authentication. The minimum permissions for the PAT token are 'repo' (full)."</ID>
    <ID>MaxLineLength:i18nUi.kt$i18nUi$val screen_app_settings_notifications_pr_activity_description = "Enable to receive notifications for activity updates to pull requests. You will receive notifications for new or changed reviews, re-review requested, checks and when a pull request is ready to be merged (mergeable)."</ID>
    <ID>MaxLineLength:i18nUi.kt$i18nUi$val screen_app_settings_notifications_pr_state_description = "Enable to receive notifications when the sate of a pull request changes (e.g., Draft → Open), new pull requests are considered as changes."</ID>
    <ID>MaxLineLength:i18nUi.kt$i18nUi$val screen_edit_repo_to_check_filter_by_branch_item_description = "Add a regex if you want to show only the pull requests which matches this regex with the href"</ID>
    <ID>MaxLineLength:i18nUi.kt$i18nUi$val screen_sync_results_end_at: (emoji: String, percentage: Int, total: Int) -&gt; String = { emoji, percentage, total -&gt; "$emoji ${percentage}% errors out of a total of $total" }</ID>
    <ID>MaxLineLength:i18nUi.kt$i18nUi$val top_bar_subtitle_synchronization_result_entries: (errorPercentage: Int, total: Int) -&gt; String = { errorPercentage, total -&gt; "$errorPercentage% errors out of a total of $total" }</ID>
    <ID>MaximumLineLength:AboutScreen.kt$AboutScreen$ </ID>
    <ID>MaximumLineLength:AppProperties.kt$AppProperties$ </ID>
    <ID>MaximumLineLength:LocalDataSourceImpl.kt$LocalDataSourceImpl$ </ID>
    <ID>MaximumLineLength:NotificationsScreen.kt$NotificationsScreen$ </ID>
    <ID>MaximumLineLength:NotificationsViewModel.kt$NotificationsStateMachine$ </ID>
    <ID>MaximumLineLength:PullRequest.kt$PullRequest$ </ID>
    <ID>MaximumLineLength:PullRequestServiceActivityNotificationsUnitTest.kt$PullRequestServiceActivityNotificationsUnitTest$ </ID>
    <ID>MaximumLineLength:PullRequestServiceImpl.kt$PullRequestServiceImpl$ </ID>
    <ID>MaximumLineLength:PullRequestServiceStateNotificationsUnitTest.kt$PullRequestServiceStateNotificationsUnitTest$ </ID>
    <ID>MaximumLineLength:PullRequestsViewModel.kt$PullRequestsStateMachine$ </ID>
    <ID>MaximumLineLength:ReleaseServiceImpl.kt$ReleaseServiceImpl$ </ID>
    <ID>MaximumLineLength:SettingsScreen.kt$SettingsScreen$ </ID>
    <ID>MaximumLineLength:SyncResultDecorator.kt$SyncResultDecorator$ </ID>
    <ID>MaximumLineLength:SynchronizerImpl.kt$SynchronizerImpl$ </ID>
    <ID>MaximumLineLength:i18nUi.kt$i18nUi$ </ID>
    <ID>MayBeConst:SynchronizerImpl.kt$SynchronizerImpl.Companion$val MAX_SYNC_RESULTS = 1_000</ID>
    <ID>MayBeConst:i18nApp.kt$i18nApp$val dialog_new_app_version_ignore_button = "Ignore"</ID>
    <ID>MayBeConst:i18nApp.kt$i18nApp$val dialog_new_app_version_title = "Update available"</ID>
    <ID>MayBeConst:i18nApp.kt$i18nApp$val dialog_new_app_version_update_button = "Update now"</ID>
    <ID>MayBeConst:i18nApp.kt$i18nApp$val menu_bar_menu_actions = "Actions"</ID>
    <ID>MayBeConst:i18nApp.kt$i18nApp$val menu_bar_menu_item_synchronize = "Synchronize"</ID>
    <ID>MayBeConst:i18nApp.kt$i18nApp$val screen_edit_repo_to_check_pull_request_section = "Sync pull requests"</ID>
    <ID>MayBeConst:i18nApp.kt$i18nApp$val tab_title_about = "About"</ID>
    <ID>MayBeConst:i18nApp.kt$i18nApp$val tab_title_about_libraries = "About libraries"</ID>
    <ID>MayBeConst:i18nApp.kt$i18nApp$val tab_title_notifications = "Notifications"</ID>
    <ID>MayBeConst:i18nApp.kt$i18nApp$val tab_title_pull_requests = "Pulls"</ID>
    <ID>MayBeConst:i18nApp.kt$i18nApp$val tab_title_releases = "Releases"</ID>
    <ID>MayBeConst:i18nApp.kt$i18nApp$val tab_title_repos_to_check = "Repos"</ID>
    <ID>MayBeConst:i18nApp.kt$i18nApp$val tab_title_settings = "Settings"</ID>
    <ID>MayBeConst:i18nApp.kt$i18nApp$val tray_item_exit = "Exit"</ID>
    <ID>MayBeConst:i18nApp.kt$i18nApp$val tray_item_hide_app = "Hide in tray"</ID>
    <ID>MayBeConst:i18nApp.kt$i18nApp$val tray_item_show_app = "Show"</ID>
    <ID>MayBeConst:i18nApp.kt$i18nApp$val tray_item_synchronize = "Synchronize"</ID>
    <ID>MayBeConst:i18nCore.kt$i18nCore$val generic_now = "now"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val app_settings_checkout_time_unknown = "?"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val app_settings_pr_cleanup_unknown = "?"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val app_theme_dark = "Dark"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val app_theme_light = "Light"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val app_theme_system_default = "System default"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val dialog_new_app_version_ignore_button = "Ignore"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val dialog_new_app_version_title = "Update available"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val dialog_new_app_version_update_button = "Update now"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val file_dialog_choose_file = "Choose a file"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val file_dialog_save_file = "Save a file"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val generic_delete = "Delete"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val generic_disabled = "Disabled"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val generic_enabled = "Enabled"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val generic_error = "Error"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val generic_loading = "Loading"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val generic_now = "now"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val generic_saved = "Saved"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val generic_unknown = "unknown"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val githubRepoLink = "https://github.com/walter-juan/ghd"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val menu_bar_menu_actions = "Actions"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val menu_bar_menu_item_synchronize = "Synchronize"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val pull_request_on = "on"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val pull_request_opened_by = "opened by"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val pull_request_state_closed = "Closed"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val pull_request_state_draft = "Draft"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val pull_request_state_merged = "Merged"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val pull_request_state_open = "Open"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val pull_request_state_unknown = "Unknown"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val release_on = "on"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val release_tag = "Tag"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_appliation_section = "Application"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_checkout_timeout_item = "Sync Interval"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_checkout_timeout_item_description = "How often to check for updates"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_github_field_hide = "Hide token"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_github_field_show = "Show token"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_github_token_field_label = "Token"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_github_token_item = "Personal Access Token"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_github_token_item_description = "Configure your GitHub Personal Access Token for authentication. The minimum permissions for the PAT token are 'repo' (full)."</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_last_synchronization_results_button = "See the latest synchronization results"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_last_synchronization_results_item = "Latest synchronization results"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_notifications_new_release_description = "Enable to receive notifications when a new release is created."</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_notifications_new_release_title = "Created notifications"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_notifications_pr_activity_checkbox_label = "Activity"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_notifications_pr_activity_description = "Enable to receive notifications for activity updates to pull requests. You will receive notifications for new or changed reviews, re-review requested, checks and when a pull request is ready to be merged (mergeable)."</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_notifications_pr_activity_title = "Activity notifications"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_notifications_pr_filter_out_description = "Enable notifications only for specific states."</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_notifications_pr_filter_out_title = "Filter notifications by state"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_notifications_pr_state_checkbox_label = "State changes"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_notifications_pr_state_description = "Enable to receive notifications when the sate of a pull request changes (e.g., Draft → Open), new pull requests are considered as changes."</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_notifications_pr_state_title = "State changes notifications"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_notifications_update_release_description = "Enable to receive notifications when an existing release is updated."</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_notifications_update_release_title = "Release updated notifications"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_pull_requests_clean_up_item = "Pull requests clean up"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_pull_requests_clean_up_item_description = "Remove closed and merged pull requests after certain amount of time"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_pull_requests_notifications_section = "Pull requests notifications"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_releases_notifications_section = "Releases notifications"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_repositories_item = "Repositories"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_save = "Save"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_saved = "Saved"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_synchronization_section = "Synchronization"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_theme_item = "Theme"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_app_settings_theme_item_description = "Select the theme you want to use"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_edit_repo_to_check_filter_by_branch_item = "Filter by branch"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_edit_repo_to_check_filter_by_branch_item_description = "Add a regex if you want to show only the pull requests which matches this regex with the href"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_edit_repo_to_check_group_item = "Group"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_edit_repo_to_check_group_item_description = "Join several repositories in the same group"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_edit_repo_to_check_group_name_label = "Group name"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_edit_repo_to_check_href_branch_regex_label = "Href branch regex"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_edit_repo_to_check_name_label = "Name"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_edit_repo_to_check_owner_label = "Owner"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_edit_repo_to_check_pull_request_section = "Sync pull requests"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_edit_repo_to_check_releaes_section = "Sync releases"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_edit_repo_to_check_repository_section = "Repository"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_edit_repo_to_check_save = "Save"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_edit_repo_to_no_group = "(no group)"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_login_about_app_button = "About"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_login_fresh_start = "Fresh start"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_login_fresh_start_confirmation_dialog_no_button = "No"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_login_fresh_start_confirmation_dialog_text = "A fresh start will erase your data, are you sure?"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_login_fresh_start_confirmation_dialog_title = "Fresh start"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_login_fresh_start_confirmation_dialog_yes_button = "Yes"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_login_unlock_button = "Open the app"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_pull_requests_can_be_merged = "Ready to merge"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_pull_requests_code_changed = "Code changed since list time"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_repos_to_check_add_new_repository_item = "Add new repository"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_repos_to_check_add_new_repository_item_description = "Add manually a new repository"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_repos_to_check_bulk_example = "Example"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_repos_to_check_bulk_export = "Export"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_repos_to_check_bulk_import = "Import"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_repos_to_check_bulk_item = "Bulk import/export"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_repos_to_check_bulk_item_description = "Import or export a list of repositories in YML format"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_repos_to_check_new_repositories_section = "New repositories"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_repos_to_check_repositories_section = "Repositories"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val screen_sync_results_in_progress = "Sync in progress"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val status_bar_error = "Error"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val status_bar_loading = "Loading..."</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val status_bar_synchronized_at_unknown = "Synchronized at unknown"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val tab_title_about = "About"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val tab_title_notifications = "Notifications"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val tab_title_pull_requests = "Pulls"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val tab_title_releases = "Releases"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val tab_title_repos_to_check = "Repos"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val tab_title_settings = "Settings"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val tablerIconsRepoLink = "https://github.com/tabler/tabler-icons"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val top_bar_title_about = "About"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val top_bar_title_about_libraries = "About libraries"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val top_bar_title_notifications = "Notifications"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val top_bar_title_pull_requests = "Pull Requests"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val top_bar_title_releases = "Releases"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val top_bar_title_repos_to_check = "Repos"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val top_bar_title_repos_to_check_bulk = "Bulk import/export"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val top_bar_title_repos_to_check_bulk_sample = "Bulk file sample"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val top_bar_title_repos_to_check_edit = "Repos"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val top_bar_title_settings = "Settings"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val top_bar_title_synchronization_result_entries = "Synchronization result entries"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val top_bar_title_synchronization_results = "Synchronization results"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val tray_item_exit = "Exit"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val tray_item_hide_app = "Hide in tray"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val tray_item_show_app = "Show"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val tray_item_synchronize = "Synchronize"</ID>
    <ID>MayBeConst:i18nUi.kt$i18nUi$val tray_linux_primary_action_label = "Open Application"</ID>
    <ID>NoBlankLineBeforeRbrace:AppVersionServiceImpl.kt$AppVersionServiceImpl$ </ID>
    <ID>NoConsecutiveBlankLines:DbReleaseWithRepo.kt$ </ID>
    <ID>NoConsecutiveBlankLines:Main.kt$ </ID>
    <ID>NoConsecutiveBlankLines:RemoteDataSourceImpl.kt$RemoteDataSourceImpl$ </ID>
    <ID>NoConsecutiveBlankLines:i18nUi.kt$i18nUi$ </ID>
    <ID>NoMultipleSpaces:PullRequestServiceImpl.kt$PullRequestServiceImpl$ </ID>
    <ID>NoMultipleSpaces:SettingsScreen.kt$SettingsScreen$ </ID>
    <ID>NoMultipleSpaces:i18nCore.kt$i18nCore$ </ID>
    <ID>NoMultipleSpaces:i18nUi.kt$i18nUi$ </ID>
    <ID>NoUnusedImports:AppScreen.kt$com.woowla.ghd.app.AppScreen.kt</ID>
    <ID>ParameterListWrapping:AppVersionService.kt$AppVersionService.CheckForNewVersionResponse$(val newVersion: Boolean, val currentVersion: SemVer, val latestVersion: SemVer)</ID>
    <ID>ParameterListWrapping:Converters.kt$Converters$(value: String?)</ID>
    <ID>ParameterListWrapping:PullRequestServiceImpl.kt$PullRequestServiceImpl$(notificationsSettings: NotificationsSettings)</ID>
    <ID>ParameterListWrapping:PullRequestServiceImpl.kt$PullRequestServiceImpl$(oldPullRequestsWithReviews: List&lt;PullRequestWithRepoAndReviews&gt;)</ID>
    <ID>ParameterListWrapping:PullRequestWithRepoAndReviews.kt$(syncSettings: SyncSettings)</ID>
    <ID>ParameterListWrapping:RemoteDataSource.kt$RemoteDataSource$(repoToCheck: RepoToCheck)</ID>
    <ID>ParameterListWrapping:RepoToCheckEditViewModel.kt$RepoToCheckEditStateMachine.St.Success$(val mode: Mode, val repoToCheck: RepoToCheck, val savedSuccessfully: Boolean? = null)</ID>
    <ID>ParameterListWrapping:SynchronizableService.kt$SynchronizableService$(syncResultId: Long, syncSettings: SyncSettings, repoToCheckList: List&lt;RepoToCheck&gt;)</ID>
    <ID>ParameterListWrapping:i18nApp.kt$i18nApp$(String)</ID>
    <ID>ParameterListWrapping:i18nCore.kt$i18nCore$(String, String, String, String)</ID>
    <ID>ParameterListWrapping:i18nUi.kt$i18nUi$(String)</ID>
    <ID>ParameterListWrapping:i18nUi.kt$i18nUi$(String, String, String, String)</ID>
    <ID>ParameterListWrapping:i18nUi.kt$i18nUi$(emoji: String, percentage: Int, total: Int)</ID>
    <ID>ParameterListWrapping:i18nUi.kt$i18nUi$(errorPercentage: Int, total: Int)</ID>
    <ID>ParameterListWrapping:i18nUi.kt$i18nUi$(syncAt: Instant, rateLimitPercentageUsed: Int?, rateLimitResetAt: Instant?)</ID>
    <ID>ParameterWrapping:DbRepoToCheck.kt$DbRepoToCheck$@ColumnInfo(name = "are_pull_requests_notifications_enabled", defaultValue = "0") val arePullRequestsNotificationsEnabled: Boolean</ID>
    <ID>ParameterWrapping:DbRepoToCheck.kt$DbRepoToCheck$@ColumnInfo(name = "are_releases_notifications_enabled", defaultValue = "0") val areReleasesNotificationsEnabled: Boolean</ID>
    <ID>PropertyWrapping:i18nUi.kt$i18nUi$val sync_result_title_old: (syncAt: Instant, emoji: String, rateLimitPercentageUsed: Int?, rateLimitResetAt: Instant?) -&gt; String = { instant, emoji, rateLimitPercentageUsed, rateLimitResetAt -&gt; "$emoji Synchronized at ${instant.format()} ($rateLimitPercentageUsed% API limit used, resets ${rateLimitResetAt?.toRelativeString()})" }</ID>
    <ID>ReturnCount:PullRequestDecorator.kt$PullRequestDecorator$fun reviewsIcon(): ImageVector</ID>
    <ID>SpacingAroundColon:EventBus.kt$EventBus$:</ID>
    <ID>SpacingAroundKeyword:Cards.kt$when</ID>
    <ID>SpacingAroundKeyword:PullRequestServiceImpl.kt$PullRequestServiceImpl$when</ID>
    <ID>SpacingAroundKeyword:PullRequestWithRepoAndReviews.kt$PullRequestWithRepoAndReviews.Companion$when</ID>
    <ID>SpacingAroundKeyword:SearchRepositoryScreen.kt$SearchRepositoryScreen$when</ID>
    <ID>SpacingAroundKeyword:i18nUi.kt$i18nUi$when</ID>
    <ID>StringTemplate:i18nUi.kt$i18nUi$${percentage}</ID>
    <ID>TooGenericExceptionCaught:PullRequestsViewModel.kt$PullRequestsStateMachine$ex: Exception</ID>
    <ID>TooGenericExceptionCaught:ReleasesViewModel.kt$ReleasesStateMachine$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:ReposToCheckBulkViewModel.kt$ReposToCheckBulkStateMachine$e: Exception</ID>
    <ID>TooGenericExceptionCaught:ReposToCheckViewModel.kt$ReposToCheckStateMachine$throwable: Throwable</ID>
    <ID>TooGenericExceptionCaught:Result.kt$th: Throwable</ID>
    <ID>TooGenericExceptionCaught:SearchRepositoryViewModel.kt$SearchRepositoryStateMachine$e: Throwable</ID>
    <ID>TooGenericExceptionCaught:SettingsViewModel.kt$SettingsStateMachine$th: Throwable</ID>
    <ID>TooManyFunctions:Converters.kt$Converters</ID>
    <ID>TooManyFunctions:LocalDataSource.kt$LocalDataSource</ID>
    <ID>TooManyFunctions:LocalDataSourceImpl.kt$LocalDataSourceImpl : LocalDataSource</ID>
    <ID>TooManyFunctions:PullRequestServiceImpl.kt$PullRequestServiceImpl : PullRequestService</ID>
    <ID>TooManyFunctions:SynchronizerImpl.kt$SynchronizerImpl : Synchronizer</ID>
    <ID>UnusedPrivateProperty:RemoteDataSourceImpl.kt$RemoteDataSourceImpl$private val appLogger: AppLogger</ID>
    <ID>UnusedPrivateProperty:SearchRepositoryViewModel.kt$SearchRepositoryStateMachine$private val appLogger: AppLogger</ID>
    <ID>Wrapping:SearchRepositoryViewModel.kt$SearchRepositoryStateMachine$St.Error( text = state.snapshot.text, owner = state.snapshot.owner, throwable = e, )</ID>
    <ID>Wrapping:SearchRepositoryViewModel.kt$SearchRepositoryStateMachine$St.Error( text = state.snapshot.text, owner = state.snapshot.owner, throwable = throwable, )</ID>
    <ID>Wrapping:SearchRepositoryViewModel.kt$SearchRepositoryStateMachine$St.Success( text = state.snapshot.text, owner = state.snapshot.owner, repositories = repositories, )</ID>
  </CurrentIssues>
</SmellBaseline>
