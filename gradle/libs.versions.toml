[versions]
kotlin = "2.0.0"
ksp = "2.0.0-1.0.22"
compose-jetbrains = "1.6.11"
apollo3 = "3.8.4"
kotest = "5.9.1"
ktor = "2.3.11"
androidx-room = "2.7.0-alpha04"
androidx-sqlite = "2.5.0-alpha04"

[plugins]
# Kotlin for JVM
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
# Serialization/Deserialization
kotlin-plugin-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
# kapt, kotlin annotation processor tool
kapt = { id = "org.jetbrains.kotlin.kapt", version.ref = "kotlin" }
# ksp, kotlin symbol processing
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
# Compose multiplatform
compose-jetbrains = { id = "org.jetbrains.compose", version.ref = "compose-jetbrains" }
compose-compiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
# GraphQL client
apollo3 = { id = "com.apollographql.apollo3", version.ref = "apollo3" }
# Generate BuildConstant
buildconfig = { id = "com.github.gmazzo.buildconfig", version = "5.3.5" }
# Discover dependency updates
benmanesversions = { id = "com.github.ben-manes.versions", version = "0.51.0" }
# Android multiplatform, room
androidx-room = { id = "androidx.room", version.ref = "androidx-room" }

[libraries]
# Android multiplatform, navigation
androidx-navigation-compose = { group = "org.jetbrains.androidx.navigation", name = "navigation-compose", version = "2.7.0-alpha07" }
# Android multiplatform, viewmodel
androidx-lifecycle-viewmodel-compose = { group = "org.jetbrains.androidx.lifecycle", name = "lifecycle-viewmodel-compose", version = "2.8.0" }
# Android multiplatform, room + sqlite
androidx-room-compiler = { group = "androidx.room", name = "room-compiler", version.ref = "androidx-room" }
androidx-room-runtime = { group = "androidx.room", name = "room-runtime", version.ref = "androidx-room" }
androidx-sqlite-bundled = { group = "androidx.sqlite", name = "sqlite-bundled", version.ref = "androidx-sqlite" }
# kotlin coroutines, needed because we are using the main dispatcher
kotlinx-coroutines-swing = { group = "org.jetbrains.kotlinx", name = "kotlinx-coroutines-swing", version = "1.8.1" }
# date time kotlin lib
kotlinx-datetime = { group = "org.jetbrains.kotlinx", name = "kotlinx-datetime", version = "0.6.0" }
# ktor http client (needed for kamel and some API requests)
ktor-client-cio = { group = "io.ktor", name = "ktor-client-cio", version.ref = "ktor" }
ktor-client-logging = { group = "io.ktor", name = "ktor-client-logging", version.ref = "ktor" }
ktor-client-content-negotiation = { group = "io.ktor", name = "ktor-client-content-negotiation", version.ref = "ktor" }
ktor-serialization-kotlinx-json = { group = "io.ktor", name = "ktor-serialization-kotlinx-json", version.ref = "ktor" }
# GraphQL client
apollo3 = { group = "com.apollographql.apollo3", name = "apollo-runtime", version.ref = "apollo3" }
# logger
logback-classic = { group = "ch.qos.logback", name = "logback-classic", version = "1.5.6" }
# cross-platform lib to resolve some application directories for desktop
appdirs = { group = "net.harawata", name = "appdirs", version = "1.2.2" }
# kamel, media loading and caching (requires Ktor HttpClient)
kamel = { group = "media.kamel", name = "kamel-image", version = "0.9.5" }
# YAML support for kotlinx.serialization
kaml = { group = "com.charleskorn.kaml", name = "kaml", version = "0.60.0" }
# Kotlin's data class for Semantic Versioning 2.0.0 specification (SemVer)
semver = { group = "net.swiftzer.semver", name = "semver", version = "2.0.0" }
# state machine
tinder-statemachine = { group = "com.tinder.statemachine", name = "statemachine", version = "0.2.0" }
# multiplatform library for saving simple key-value data
settings = { group = "com.russhwolf", name = "multiplatform-settings", version = "1.1.1" }
# icons
icons-tabler = { group = "com.woowla.compose.icon.collections", name = "tabler", version = "3.19.0" }

# mockk, mocking library for Kotlin
mockk = { group = "io.mockk", name = "mockk", version = "1.13.13" }
# kotest runner
test-kotest-runner-junit5 = { group = "io.kotest", name = "kotest-runner-junit5", version.ref = "kotest" }
# kotest property-based testing (right now used only for the data generators)
test-kotest-property = { group = "io.kotest", name = "kotest-property", version.ref = "kotest" }
# kotest assertions
test-kotest-assertions-core = { group = "io.kotest", name = "kotest-assertions-core", version.ref = "kotest" }
# kotest assertions, kotlinx DateTime assertions
test-kotest-assertions-kotlinx-time = { group = "io.kotest", name = "kotest-assertions-kotlinx-time", version = "4.4.3" }
# kotest property-based testing, kotlinx DateTime generators
test-kotest-extensions-property-datetime = { group = "io.kotest.extensions", name = "kotest-property-datetime", version = "2.0.0" }

[bundles]
ktor-client = ["ktor-client-cio", "ktor-client-logging", "ktor-client-content-negotiation", "ktor-serialization-kotlinx-json"]
test-kotest = ["test-kotest-runner-junit5", "test-kotest-property", "test-kotest-assertions-core", "test-kotest-assertions-kotlinx-time", "test-kotest-extensions-property-datetime"]